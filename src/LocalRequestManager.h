/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef LocalRequestManager_H
#define LocalRequestManager_H

#include <TProcessor.h>
#include "kumonosu_server_types.h"

namespace kumonosu {

class LocalRequestManagerIf {
 public:
  virtual ~LocalRequestManagerIf() {}
  virtual void QueueItem(const int32_t serviceId, const queueItem& item) = 0;
  virtual void QueueInternalItem(const queueItem& item) = 0;
  virtual void GetItem(queueItem& _return, const int32_t serviceId) = 0;
  virtual void GetItemList(queueItemList& _return, const int32_t serviceId) = 0;
  virtual void GetItemListByCount(queueItemList& _return, const int32_t serviceId, const int32_t count) = 0;
};

class LocalRequestManagerNull : virtual public LocalRequestManagerIf {
 public:
  virtual ~LocalRequestManagerNull() {}
  void QueueItem(const int32_t /* serviceId */, const queueItem& /* item */) {
    return;
  }
  void QueueInternalItem(const queueItem& /* item */) {
    return;
  }
  void GetItem(queueItem& /* _return */, const int32_t /* serviceId */) {
    return;
  }
  void GetItemList(queueItemList& /* _return */, const int32_t /* serviceId */) {
    return;
  }
  void GetItemListByCount(queueItemList& /* _return */, const int32_t /* serviceId */, const int32_t /* count */) {
    return;
  }
};

class LocalRequestManager_QueueItem_args {
 public:

  LocalRequestManager_QueueItem_args() : serviceId(0) {
  }

  virtual ~LocalRequestManager_QueueItem_args() throw() {}

  int32_t serviceId;
  queueItem item;

  struct __isset {
    __isset() : serviceId(false), item(false) {}
    bool serviceId;
    bool item;
  } __isset;

  bool operator == (const LocalRequestManager_QueueItem_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_QueueItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_QueueItem_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_QueueItem_pargs {
 public:


  virtual ~LocalRequestManager_QueueItem_pargs() throw() {}

  const int32_t* serviceId;
  const queueItem* item;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_QueueInternalItem_args {
 public:

  LocalRequestManager_QueueInternalItem_args() {
  }

  virtual ~LocalRequestManager_QueueInternalItem_args() throw() {}

  queueItem item;

  struct __isset {
    __isset() : item(false) {}
    bool item;
  } __isset;

  bool operator == (const LocalRequestManager_QueueInternalItem_args & rhs) const
  {
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_QueueInternalItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_QueueInternalItem_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_QueueInternalItem_pargs {
 public:


  virtual ~LocalRequestManager_QueueInternalItem_pargs() throw() {}

  const queueItem* item;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItem_args {
 public:

  LocalRequestManager_GetItem_args() : serviceId(0) {
  }

  virtual ~LocalRequestManager_GetItem_args() throw() {}

  int32_t serviceId;

  struct __isset {
    __isset() : serviceId(false) {}
    bool serviceId;
  } __isset;

  bool operator == (const LocalRequestManager_GetItem_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_GetItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_GetItem_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItem_pargs {
 public:


  virtual ~LocalRequestManager_GetItem_pargs() throw() {}

  const int32_t* serviceId;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItem_result {
 public:

  LocalRequestManager_GetItem_result() {
  }

  virtual ~LocalRequestManager_GetItem_result() throw() {}

  queueItem success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const LocalRequestManager_GetItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_GetItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_GetItem_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItem_presult {
 public:


  virtual ~LocalRequestManager_GetItem_presult() throw() {}

  queueItem* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class LocalRequestManager_GetItemList_args {
 public:

  LocalRequestManager_GetItemList_args() : serviceId(0) {
  }

  virtual ~LocalRequestManager_GetItemList_args() throw() {}

  int32_t serviceId;

  struct __isset {
    __isset() : serviceId(false) {}
    bool serviceId;
  } __isset;

  bool operator == (const LocalRequestManager_GetItemList_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_GetItemList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_GetItemList_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItemList_pargs {
 public:


  virtual ~LocalRequestManager_GetItemList_pargs() throw() {}

  const int32_t* serviceId;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItemList_result {
 public:

  LocalRequestManager_GetItemList_result() {
  }

  virtual ~LocalRequestManager_GetItemList_result() throw() {}

  queueItemList success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const LocalRequestManager_GetItemList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_GetItemList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_GetItemList_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItemList_presult {
 public:


  virtual ~LocalRequestManager_GetItemList_presult() throw() {}

  queueItemList* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class LocalRequestManager_GetItemListByCount_args {
 public:

  LocalRequestManager_GetItemListByCount_args() : serviceId(0), count(0) {
  }

  virtual ~LocalRequestManager_GetItemListByCount_args() throw() {}

  int32_t serviceId;
  int32_t count;

  struct __isset {
    __isset() : serviceId(false), count(false) {}
    bool serviceId;
    bool count;
  } __isset;

  bool operator == (const LocalRequestManager_GetItemListByCount_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_GetItemListByCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_GetItemListByCount_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItemListByCount_pargs {
 public:


  virtual ~LocalRequestManager_GetItemListByCount_pargs() throw() {}

  const int32_t* serviceId;
  const int32_t* count;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItemListByCount_result {
 public:

  LocalRequestManager_GetItemListByCount_result() {
  }

  virtual ~LocalRequestManager_GetItemListByCount_result() throw() {}

  queueItemList success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const LocalRequestManager_GetItemListByCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LocalRequestManager_GetItemListByCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LocalRequestManager_GetItemListByCount_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class LocalRequestManager_GetItemListByCount_presult {
 public:


  virtual ~LocalRequestManager_GetItemListByCount_presult() throw() {}

  queueItemList* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class LocalRequestManagerClient : virtual public LocalRequestManagerIf {
 public:
  LocalRequestManagerClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  LocalRequestManagerClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void QueueItem(const int32_t serviceId, const queueItem& item);
  void send_QueueItem(const int32_t serviceId, const queueItem& item);
  void QueueInternalItem(const queueItem& item);
  void send_QueueInternalItem(const queueItem& item);
  void GetItem(queueItem& _return, const int32_t serviceId);
  void send_GetItem(const int32_t serviceId);
  void recv_GetItem(queueItem& _return);
  void GetItemList(queueItemList& _return, const int32_t serviceId);
  void send_GetItemList(const int32_t serviceId);
  void recv_GetItemList(queueItemList& _return);
  void GetItemListByCount(queueItemList& _return, const int32_t serviceId, const int32_t count);
  void send_GetItemListByCount(const int32_t serviceId, const int32_t count);
  void recv_GetItemListByCount(queueItemList& _return);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class LocalRequestManagerProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<LocalRequestManagerIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (LocalRequestManagerProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_QueueItem(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_QueueInternalItem(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_GetItem(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_GetItemList(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_GetItemListByCount(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  LocalRequestManagerProcessor(boost::shared_ptr<LocalRequestManagerIf> iface) :
    iface_(iface) {
    processMap_["QueueItem"] = &LocalRequestManagerProcessor::process_QueueItem;
    processMap_["QueueInternalItem"] = &LocalRequestManagerProcessor::process_QueueInternalItem;
    processMap_["GetItem"] = &LocalRequestManagerProcessor::process_GetItem;
    processMap_["GetItemList"] = &LocalRequestManagerProcessor::process_GetItemList;
    processMap_["GetItemListByCount"] = &LocalRequestManagerProcessor::process_GetItemListByCount;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~LocalRequestManagerProcessor() {}
};

class LocalRequestManagerMultiface : virtual public LocalRequestManagerIf {
 public:
  LocalRequestManagerMultiface(std::vector<boost::shared_ptr<LocalRequestManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LocalRequestManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LocalRequestManagerIf> > ifaces_;
  LocalRequestManagerMultiface() {}
  void add(boost::shared_ptr<LocalRequestManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void QueueItem(const int32_t serviceId, const queueItem& item) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->QueueItem(serviceId, item);
    }
  }

  void QueueInternalItem(const queueItem& item) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->QueueInternalItem(item);
    }
  }

  void GetItem(queueItem& _return, const int32_t serviceId) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetItem(_return, serviceId);
        return;
      } else {
        ifaces_[i]->GetItem(_return, serviceId);
      }
    }
  }

  void GetItemList(queueItemList& _return, const int32_t serviceId) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetItemList(_return, serviceId);
        return;
      } else {
        ifaces_[i]->GetItemList(_return, serviceId);
      }
    }
  }

  void GetItemListByCount(queueItemList& _return, const int32_t serviceId, const int32_t count) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->GetItemListByCount(_return, serviceId, count);
        return;
      } else {
        ifaces_[i]->GetItemListByCount(_return, serviceId, count);
      }
    }
  }

};

} // namespace

#endif
