.TH "kumonosu::Callback" 3 "14 Aug 2009" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
kumonosu::Callback \- Provides a simple wrapper for callback functions.  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <Callback.h>\fP
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCallback\fP (void *object, void(*FunctionPtr)(void *object, arguments argList))"
.br
.RI "\fIInitializes the callback function. \fP"
.ti -1c
.RI "void \fBexecute\fP (arguments argList)"
.br
.RI "\fIExecutes the stored callback function. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Provides a simple wrapper for callback functions. 

\fBCallback\fP is a very simple wrapper for managing callback functions using function pointers. It provides no explicit threading protections, instead it is the responsibility of the callback provider to provide thread safety.
.PP
\fBAuthor:\fP
.RS 4
Matt Brace 
.RE
.PP

.PP
Definition at line 28 of file Callback.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Callback::Callback (void * object, void(*)(void *object, arguments argList) FunctionPtr)"
.PP
Initializes the callback function. 
.PP
Assigns the items for internal data storage, used during execution. 
.PP
\fBParameters:\fP
.RS 4
\fIobject\fP The object that the function is a member of. 
.br
\fIFunctionPtr\fP The pointer to the function for execution. 
.RE
.PP

.PP
Definition at line 5 of file Callback.cpp.
.SH "Member Function Documentation"
.PP 
.SS "void Callback::execute (arguments argList)"
.PP
Executes the stored callback function. 
.PP
Executes the stored callback function with the signature: function(void* object, arguments) 
.PP
\fBParameters:\fP
.RS 4
\fIargList\fP The arguments object to include in the call 
.RE
.PP

.PP
Definition at line 13 of file Callback.cpp.

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
