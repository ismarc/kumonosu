/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef RemoteRequestManager_H
#define RemoteRequestManager_H

#include <TProcessor.h>
#include "kumonosu_server_types.h"

namespace kumonosu {

class RemoteRequestManagerIf {
 public:
  virtual ~RemoteRequestManagerIf() {}
  virtual void QueueItem(const int32_t serviceId, const queueItem& item) = 0;
};

class RemoteRequestManagerNull : virtual public RemoteRequestManagerIf {
 public:
  virtual ~RemoteRequestManagerNull() {}
  void QueueItem(const int32_t /* serviceId */, const queueItem& /* item */) {
    return;
  }
};

class RemoteRequestManager_QueueItem_args {
 public:

  RemoteRequestManager_QueueItem_args() : serviceId(0) {
  }

  virtual ~RemoteRequestManager_QueueItem_args() throw() {}

  int32_t serviceId;
  queueItem item;

  struct __isset {
    __isset() : serviceId(false), item(false) {}
    bool serviceId;
    bool item;
  } __isset;

  bool operator == (const RemoteRequestManager_QueueItem_args & rhs) const
  {
    if (!(serviceId == rhs.serviceId))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const RemoteRequestManager_QueueItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteRequestManager_QueueItem_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class RemoteRequestManager_QueueItem_pargs {
 public:


  virtual ~RemoteRequestManager_QueueItem_pargs() throw() {}

  const int32_t* serviceId;
  const queueItem* item;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class RemoteRequestManagerClient : virtual public RemoteRequestManagerIf {
 public:
  RemoteRequestManagerClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RemoteRequestManagerClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void QueueItem(const int32_t serviceId, const queueItem& item);
  void send_QueueItem(const int32_t serviceId, const queueItem& item);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class RemoteRequestManagerProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<RemoteRequestManagerIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (RemoteRequestManagerProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_QueueItem(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  RemoteRequestManagerProcessor(boost::shared_ptr<RemoteRequestManagerIf> iface) :
    iface_(iface) {
    processMap_["QueueItem"] = &RemoteRequestManagerProcessor::process_QueueItem;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~RemoteRequestManagerProcessor() {}
};

class RemoteRequestManagerMultiface : virtual public RemoteRequestManagerIf {
 public:
  RemoteRequestManagerMultiface(std::vector<boost::shared_ptr<RemoteRequestManagerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RemoteRequestManagerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RemoteRequestManagerIf> > ifaces_;
  RemoteRequestManagerMultiface() {}
  void add(boost::shared_ptr<RemoteRequestManagerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void QueueItem(const int32_t serviceId, const queueItem& item) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->QueueItem(serviceId, item);
    }
  }

};

} // namespace

#endif
